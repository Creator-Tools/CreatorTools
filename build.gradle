plugins {
	id 'fabric-loom' version '1.3-SNAPSHOT'
	id 'maven-publish'
	id 'com.github.johnrengelman.shadow' version '7.1.2'
}

version = project.mod_version
group = project.maven_group

shadowJar {
	archivesBaseName = "CreatorTools"
	archiveClassifier = ''
	archiveVersion = ''
	destinationDirectory = file("$rootDir/output")
	dependencies {
		include(dependency("com.github.kusaanko:YouTubeLiveChat:1.5"))
	}
}

compileJava {
    options.compilerArgs += ["-parameters"]
    options.fork = true
    options.encoding = 'utf-8'
}

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral()
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
	maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }
	maven { url = "https://maven.terraformersmc.com/releases/com/terraformersmc/modmenu/" }
	maven { url "https://raw.githubusercontent.com/kusaanko/maven/main/" }
	maven { url "https://maven.awakenedredstone.com"}
}

loom {
	accessWidenerPath = file("src/main/resources/creatortools.accesswidener")
	runs {
		// This adds a new gradle task that runs the datagen API: "gradlew runDatagen"
		datagen {
			inherit server
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=creatortools"
 
			runDir "build/datagen"
		}
	}
}

// Add the generated resources to the main source set
sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}
dependencies {
	implementation 'com.google.code.gson:gson:2.8.7'
//	compileOnly "com.github.kusaanko:YouTubeLiveChat:1.5"
//	implementation "com.github.twitch4j:twitch4j:1.16.0"

	compileOnly 'org.projectlombok:lombok:1.18.28'
	annotationProcessor 'org.projectlombok:lombok:1.18.28'

	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modApi("me.shedaniel.cloth:cloth-config-fabric:11.1.106") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Mod Menu
	modImplementation("com.terraformersmc:modmenu:7.2.1") {
		transitive = false
	}

	modRuntimeOnly("me.djtheredstoner:DevAuth-fabric:1.1.2")
	
	include modApi("com.github.kusaanko:YouTubeLiveChat:1.5")

	modCompileOnly "com.github.twitch4j:twitch4j-fabric:1.16.0+1.2.0"
	
	//	kotlin.1.8.20"
	//	include "org.hdrhistogram:HdrHistogram:2.1.9"

	// Uncomment the following line to enable the deprecated Fabric API modules. 
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

//	 modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"
}
remapJar.dependsOn shadowJar
remapJar {
	input = tasks.shadowJar.outputs.files.singleFile
}
processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}